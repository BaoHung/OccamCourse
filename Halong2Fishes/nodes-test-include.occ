-- 3 things to declare
-- diam.proto for data circulating on links
-- define code for Node() procedure
-- define code for Mux() procedure

-- protocol
PROTOCOL diam.proto IS INT:

-- procedures matching
--    Node(P9.in, P9.out,9, toMux [9])
--    Mux(toMux,stdout)
-- version where all the processes are looping to implement a distributed algo.
-- it can be route computation in a sensor network,
-- or a cellular automata program in a cell system (can run a long time !!!)

VAL INT NumberOfSteps IS 1:

PROC CellNode([] CHAN OF diam.proto in, out, VAL INT identity, CHAN OF BYTE fromMux)
  CellPosition myLoc,itsLoc:
  [MaxFanOut] INT  inBuf, outBuf:
  INT minX,maxX,minY,maxY: -- for bbox comutation
  REAL64 maxElevation:
  INT seed, randNumber, currentTime:
  BYTE myChar:
  TIMER clock:
  INT numberOfFishes, limit, outgoing, goneFishes:
  CellArray theCellArray:
  CellPosition position:
  SEQ
    -- geographic interface
    theCellArray := Cells[identity]
    position := theCellArray[position]
    myLoc := position
    -- generate initial fishes less than 10
    seed := identity 
    numberOfFishes, seed := random( 10, seed) -- numberOfFishes is random within [0,10[
    -- get the elevation
    maxElevation := position[elevation]
    IF 
      maxElevation>0.5 -- we are on the ground, so no fish
        numberOfFishes :=0
      TRUE
        SKIP

    -- now start the automaton for NumberOfSteps turns
    SEQ turns = 0 FOR NumberOfSteps
      SEQ
        -- fill the output buffer : prepare fishes for the neighbours
        goneFishes := 0
        SEQ i = 0 FOR SIZE out
          SEQ
            limit := ( numberOfFishes / 2) / (SIZE out) -- share outgoing between neighbours
            IF
              limit > 0
                outgoing , seed := random( limit , seed)
              TRUE
                outgoing := 0
            outBuf[i] := outgoing
            goneFishes := goneFishes + outgoing
        -- implement a random delay
        randNumber, seed := random( 100, seed) -- randNumber is random within [0,100[
        clock ? currentTime
        clock ? AFTER currentTime +  (randNumber * 5000)
        -- send and receive papers on the neighborhood!
        PAR
          PAR i=0 FOR SIZE out
            out[i] ! outBuf[i]  -- send paper in  the air 
          PAR i=0 FOR SIZE in
            in[i] ? inBuf[i]
        -- We got neighbour location in inBuf !!
        IF
          maxElevation>0.5 -- we are on the ground, so no fish
            numberOfFishes :=0
          TRUE -- accept fishes from the neighbours and remove gone fishes@
            SEQ
              -- take care of outgoin fishes
              numberOfFishes := numberOfFishes - goneFishes
              SEQ i=0 FOR SIZE in
                numberOfFishes := numberOfFishes + inBuf[i]
        out.number(numberOfFishes,0,fromMux)
        fromMux ! '*n'
:

PROC Mux([] CHAN OF BYTE inChannel, CHAN OF BYTE out)
  BYTE aValue,cr:
  SEQ
    SEQ turns = 0 FOR NumberOfSteps
      SEQ i = 0 FOR SIZE inChannel -- for each process
        ALT j=0 FOR SIZE inChannel -- non determinist construct
          inChannel[j] ? aValue -- synchronization on j ready channel, and read a byte
            SEQ -- take this action.
              WHILE aValue <> '*n'
                SEQ          
                  out ! aValue
                  inChannel[j] ? aValue
              out ! '*n' -- write carriage return on standard output
:


