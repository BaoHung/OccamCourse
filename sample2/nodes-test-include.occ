-- 3 things to declare
-- diam.proto for data circulating on links
-- define code for Node() procedure
-- define code for Mux() procedure

-- protocol
PROTOCOL diam.proto IS Location:

-- procedures matching
--    Node(P9.in, P9.out,9, toMux [9])
--    Mux(toMux,stdout)

PROC Node([] CHAN OF diam.proto in, out, VAL INT identity, CHAN OF BYTE fromMux)
  Location myLoc,itsLoc:
  [MaxFanOut] Location inBuf, outBuf:
  INT minX,maxX,minY,maxY:
  INT seed, randNumber, currentTime:
  BYTE myChar:
  TIMER clock:
  SEQ
    seed := identity * 2
    randNumber, seed := random(100,seed) -- random number between 0 and 100
    myLoc := NetLocation[identity]  -- got my location!
    -- write it on papers for neighbours !
    SEQ i = 0 FOR SIZE out
      outBuf[i] := myLoc
    -- implement a random delay
    clock ? currentTime 
    clock ? AFTER currentTime + (randNumber * 100000)
    -- send and receive papers on the neighborhood!
    PAR
      PAR i=0 FOR SIZE out
        out[i] ! outBuf[i]  -- send paper in  the air 
      PAR i=0 FOR SIZE in
        in[i] ? inBuf[i]
    -- We got neighbour location in inBuf !!
    -- Compute BBox
    minX:=myLoc[xLoc]
    minY:=myLoc[yLoc]
    maxX:=myLoc[xLoc]
    maxY:=myLoc[yLoc]
    SEQ i=0 FOR SIZE in
      SEQ
        itsLoc := inBuf[i]
        IF
          itsLoc[xLoc] > maxX
            maxX := itsLoc[xLoc]
          TRUE
            SKIP

        IF
          itsLoc[yLoc] > maxY
            maxY := itsLoc[yLoc]
          TRUE
            SKIP

        IF
          itsLoc[xLoc] < minX
            minX := itsLoc[xLoc]
          TRUE
            SKIP

        IF
          itsLoc[yLoc] < minY
            minY := itsLoc[yLoc]
          TRUE
            SKIP

    out.number(identity, 5, fromMux)
    out.number(myLoc[xLoc], 5, fromMux)
    out.number(myLoc[yLoc], 5, fromMux)
    out.number(minX, 5, fromMux)
    out.number(minY, 5, fromMux)
    out.number(maxX, 5, fromMux)
    out.number(maxY, 5, fromMux)
    fromMux ! '*n'
:

PROC Mux([] CHAN OF BYTE inChannel, CHAN OF BYTE out)
  BYTE aValue,cr:
  SEQ
    SEQ i = 0 FOR SIZE inChannel -- for each process
      ALT j=0 FOR SIZE inChannel
        inChannel[i] ? aValue -- read a byte
          SEQ
          -- out.number ( aValue, 0, out) -- write byte on standard output
            WHILE aValue <> '*n'
              SEQ          
                out ! aValue
                inChannel[i] ? aValue
            out ! '*n' -- write carriage return on standard output
:


